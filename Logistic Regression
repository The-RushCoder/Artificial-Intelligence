import pandas as pd
import math as m
import random
import matplotlib.pyplot as plt


def sigmoid(z):
    return 1 / (1 + m.exp(-z))


def TrainingData(trainingDataset, lr):
    theta = [random.uniform(0, 1) for _ in range(len(trainingDataset[0]))]
    history = []
    itr = 0
    while itr <= 500:
        itr += 1
        TJ = 0
        for X in trainingDataset:
            z = sum([t * x for t, x in zip(theta, X[:-1] + [1])])
            if z > 100:
                h = 1
            elif z < -100:
                h = 0
            else:
                h = sigmoid(z)
            y = X[-1]
            h = min(max(h, 1e-15), 1 - 1e-15)
            J = -y * m.log(h) - (1 - y) * m.log(1 - h)
            TJ += J
            dv = [x * (h - y) for x in X[:-1] + [1]]
            theta = [t - (dvi * lr) for t, dvi in zip(theta, dv)]

        TJ /= len(trainingDataset)
        history.append(TJ)

    return theta, history


def Validation(theta):
    correct = 0
    for V in validationDataset:
        z = sum([t * v for t, v in zip(theta, V[:-1] + [1])])
        if z > 100:
            h = 1
        elif z < -100:
            h = 0
        else:
            h = sigmoid(z)
        if h >= 0.5:
            h = 1
        else:
            h = 0
        y = V[-1]
        if h == y:
            correct += 1
    val_acc = (correct * 100) / len(validationDataset)
    return val_acc


datacsv = pd.read_csv('dataset1.csv')
data_set = []
for index, row in datacsv.iterrows():
    item = row.values.tolist()
    data_set.append(item)

trainingDataset = data_set[:int(len(data_set) * .70)]
validationDataset = data_set[int(len(data_set) * .70):int(len(data_set) * .85)]
testDataset = data_set[-int(len(data_set) * .15):]

LearningRate = [0.1, 0.01, 0.001, 0.0001]
max_vRate = 0
for LR in LearningRate:
    theta, train_loss = TrainingData(trainingDataset, LR)
    vRate = Validation(theta)
    print("Learning Rate:", LR, "Validation Accuracy:", vRate)
    if vRate > max_vRate:
        Rate = LR
        max_vRate = vRate
        loss = train_loss
        bestTheta = theta

print("Max Validation Accuracy:", max_vRate, "For Learning Rate:", Rate)

# TESTING
correct = 0
for T in testDataset:
    z = sum([t * test for t, test in zip(bestTheta, T[:-1] + [1])])
    if z > 100:
        h = 1
    elif z < -100:
        h = 0
    else:
        h = sigmoid(z)
    if h >= 0.5:
        h = 1
    else:
        h = 0
    y = T[-1]
    if h == y:
        correct += 1
test_acc = (correct * 100) / len(testDataset)
print("Test Accuracy:", test_acc)

itr = [i for i in range(len(loss))]
plt.plot(itr, loss)
plt.xlabel('Epoch')
plt.ylabel('Train_loss')
plt.title('Epoch vs Train_loss')
plt.grid(True)
plt.show()
